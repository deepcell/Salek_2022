Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
sobj.obs
sobj
sobj$nCount_RNA
sobj$HTOnew_maxID
sobj$HTOnew_secondID
sobj$HTOnew_margin
d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="kmeans", positive.quantile=0.75)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
sobj$HTOnew_margin
sobj$HTOnew_classification.global
rownames(sobj)
colnames(sobj)
assays(sobj)
rowSums(sobj$HTOnew_classification.global)
table(sobj$HTOnew_classification.global)
table(sobj$HTOnew_maxID)
table(sobj$HTOnew_secondID)
d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="kmeans", positive.quantile=0.95)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
d <- Read10X("/Users/julie/Downloads/rna032_filtered_feature_bc_matrix_count_v2")
d <- Read10X("/Users/julie/Downloads/rna032_filtered_feature_bc_matrix_v2")
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="kmeans", positive.quantile=0.95)
d <- Read10X("/Users/julie/Downloads/rna032_filtered_feature_bc_matrix_v2")
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="kmeans", positive.quantile=0.9)
d <- Read10X("/Users/julie/Downloads/rna032_filtered_feature_bc_matrix_v2")
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="kmeans", positive.quantile=0.6)
d <- Read10X("/Users/julie/Downloads/rna032_filtered_feature_bc_matrix_v2")
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.6)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
d <- Read10X("/Users/julie/Downloads/rna032_filtered_feature_bc_matrix_v2")
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.9)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
d <- Read10X("/Users/julie/Downloads/rna032_fbc_umi_count")
d <- Read10X("/Users/julie/Downloads/rna032_fbc_umi_count")
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
d$`HT01-GTCAACTCTTTAGCG`
rownames(d$`HT01-GTCAACTCTTTAGCG`)
sum(rownames(d$`HT01-GTCAACTCTTTAGCG`))
d$`HT01-GTCAACTCTTTAGCG`@i
d$`HT01-GTCAACTCTTTAGCG`@p
d$`HT01-GTCAACTCTTTAGCG`@Dim
d$`HT01-GTCAACTCTTTAGCG`@Dimnames
d$`HT01-GTCAACTCTTTAGCG`@x
d$`HT01-GTCAACTCTTTAGCG`@p
d$`HT02-TGATGGCCTATTGGG`@p
tail(d$`HT02-TGATGGCCTATTGGG`@p)
d <- Read10X("/Users/julie/Downloads/rna032_filtered_feature_bc_matrix_v3")
# d <- Read10X("/Users/julie/Downloads/rna032_fbc_umi_count")
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.9)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
d <- Read10X("/Users/julie/Downloads/rna032_2_filtered_feature_bc_matrix")
# d <- Read10X("/Users/julie/Downloads/rna032_fbc_umi_count")
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.9)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 50000)
d <- Read10X("/Users/julie/Downloads/rna032_2_filtered_feature_bc_matrix")
# d <- Read10X("/Users/julie/Downloads/rna032_fbc_umi_count")
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.8)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_secondID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(Seurat)
library(patchwork)
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.95)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.8)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
# d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.5)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.5)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.9)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.99)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
d <- Read10X("/Users/julie/Downloads/RNA032_filtered_feature_bc_matrix_count")
# d <- Read10X("/Users/julie/Downloads/rna029_filtered_feature_bc_matrix")
sobj = CreateSeuratObject(counts = d$`Gene Expression`)
sobj[['HTO']] = CreateAssayObject(counts = d$`Antibody Capture`)
m <- GetAssayData(sobj, assay="HTO")
m <- m + 1
new_assay <- CreateAssayObject(counts=m)
sobj[['HTOnew']] <- new_assay
# sobj<- NormalizeData(sobj, assay='HTOnew', normalization.method='CLR')
sobj<-HTODemux(sobj, assay="HTOnew", kfunc="clara", positive.quantile=0.5)
# Global classification results
table(sobj$HTOnew_classification.global)
# Group cells based on the max HTO signal
Idents(sobj) <- "HTOnew_maxID"
RidgePlot(sobj, assay = "HTOnew", features = rownames(sobj[["HTOnew"]])[1:2], ncol = 2)
HTOHeatmap(sobj, assay = "HTOnew", ncells = 5000)
install.packages("cluster", type = "source")
install.packages("devtools")
library(devtools)
install_github("genome/bmm")
library(devtools)
install_github("genome/bmm")
install.packages("~/Downloads/NORMT3_1.0-3.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/NORMT3_1.0-3.tar.gz", repos = NULL, type = "source")
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("~/Downloads/NORMT3_1.0.4.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/NORMT3_1.0.4.tar.gz", repos = NULL, type = "source")
library(org.Hs.eg.db)
library("DESeq2")
library(clusterProfiler)
library("RColorBrewer")
library(ggnewscale)
library(pheatmap)
library(knitr)
require(DOSE)
library(ggplot2)
library(umap)
library(biomaRt)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
remotes::install_version("rlang", "1.0.2")
install.packages("~/Downloads/NORMT3_1.0-3.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/NORMT3_1.0-3.tar.gz", repos = NULL, type = "source")
library(org.Hs.eg.db)
library(org.Hs.eg.db)
library(org.Hs.eg.db)
# library(org.Hs.eg.db)
library("DESeq2")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(org.Hs.eg.db)
library("DESeq2")
library(clusterProfiler)
library("RColorBrewer")
library(ggnewscale)
library(pheatmap)
library(knitr)
require(DOSE)
library(ggplot2)
library(umap)
library(biomaRt)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
install_github('hdng/clonevol')
library(devtools)
install_github('hdng/clonevol')
library(clonevol)
install.packages('gridBase')
install.packages('gridExtra')
install.packages('igraph')
install.packages('packcircles')
install_github('hdng/trees')
library(ggplot2)
data(aml1)
x <- aml1$variants
x
x
aml1
vaf.col.names <- grep('.vaf', colnames(x), value=T)
vaf.col.names
sample.names <- gsub('.vaf', '', vaf.col.names)
sample.names
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/julie/tools/Salek_2022/SupplementaryFigure10/data")
library(umap)
library(scales)
d <- read.csv("FeatureSelection_DataTable_CC.csv", as.is=T)
names(d)[1] <- "cell_id"
epcam <- read.csv("DTC1-3 EPCAM.csv", as.is = T, check.names = F)
names(epcam)[1] <- names(d)[1] <- "cell_id"
d <- merge(d, epcam)
d
um1 <- umap(d[,2:ncol(d)])
um1_layout <- data.frame(um1$layout)
um1_layout$cell_id <- d$cell_id
with(um1_layout, plot(X1, X2, pch = 19, col = alpha("darkgoldenrod",0.5) , cex = 0.1, main = "n_neighbors = 15, min_dist = 0.1"))
write.csv(um1_layout, "umap_nn_15_mindist_p1_epcam.csv")
d2 <- d[!(d$cell_id %in% um1_layout$cell_id[um1_layout$X2 < -10]),]
um2 <- umap(d2[,2:ncol(d2)])
um2_layout <- data.frame(um2$layout)
um2_layout$cell_id <- d2$cell_id
with(um2_layout, plot(X1, X2, pch = 19, col = alpha("darkgoldenrod",0.5) , cex = 0.1, main = "n_neighbors = 15, min_dist = 0.1"))
write.csv(um1_layout, "umap2_nn_15_mindist_p1_epcam.csv")
custom.config <- umap.defaults
custom.config$min_dist <- 0.3
um2 <- umap(d2[,2:ncol(d2)], custom.config)
um2_mindist_p3_layout <- data.frame(um2$layout)
um2_mindist_p3_layout$cell_id <- d2$cell_id
with(um2_mindist_p3_layout, plot(X1, X2, pch = 19, col = alpha("darkgoldenrod",0.5) , cex = 0.1, main = "n_neighbors = 15, min_dist = 0.3"))
write.csv(um2_mindist_p3_layout, "um2_mindist_p3_layout_epcam.csv")
custom.config <- umap.defaults
custom.config$min_dist <- 0.3
um_nn15_mindist_p3 <- umap(d[,2:ncol(d)], custom.config)
um_nn15_mindist_p3_layout <- data.frame(um_nn15_mindist_p3$layout)
um_nn15_mindist_p3_layout$cell_id <- d$cell_id
with(um_nn15_mindist_p3_layout, plot(X1, X2, pch = 19, col = alpha("darkgoldenrod",0.5) , cex = 0.1, main = "n_neighbors = 15, min_dist = 0.3"))
write.csv(um_nn15_mindist_p3_layout, "um_nn15_mindist_p3_epcam.csv")
coul <- colorRampPalette(c("lightgrey","red"))(100)
coul2 <- colorRampPalette(c("lightgrey","blue"))(100)
ul <- um2_mindist_p3_layout
ul <- merge(ul, epcam)
ul <- merge(ul, d2[,c("cell_id","PTPRC")])
ul$Col <- coul[as.numeric(cut(log10(ifelse(ul$EPCAM == 0,1, ul$EPCAM)),breaks = 100))]
ul$Col2 <- coul2[as.numeric(cut(log10(ifelse(ul$PTPRC == 0, 1, ul$PTPRC)),breaks = 100))]
ul1 <- ul[grep("DTC1", ul$cell_id),]
ul2 <- ul[grep("DTC2", ul$cell_id),]
ul3 <- ul[grep("DCT3", ul$cell_id),]
png("DTC_low_epcam.png")
with(ul1, plot(X1, X2, pch = 19, col = "lightgrey", cex = 0.1, main = "", xlab = "umap_1", ylab = "umap_2", asp = 1))
with(ul1[ul1$PTPRC > 0,], points(X1, X2, pch = 19, col = alpha(Col2,0.5), cex = 0.3))
with(ul1[ul1$EPCAM > 0,], points(X1, X2, pch = 19, col = alpha(Col,0.5), cex = 0.3))
dev.off()
png("DTC_intermediate_epcam.png")
with(ul3, plot(X1, X2, pch = 19, col = "lightgrey", cex = 0.1, main = "", xlab = "umap_1", ylab = "umap_2"))
with(ul3[ul3$PTPRC > 0,], points(X1, X2, pch = 19, col = Col2, cex = 0.3))
with(ul3[ul3$EPCAM > 0,], points(X1, X2, pch = 19, col = Col, cex = 0.3))
dev.off()
png("DTC_high_epcam.png")
with(ul2, plot(X1, X2, pch = 19, col = "lightgrey", cex = 0.1, main = "", xlab = "umap_1", ylab = "umap_2"))
with(ul2[ul2$PTPRC > 0,], points(X1, X2, pch = 19, col = Col2, cex = 0.3))
with(ul2[ul2$EPCAM > 0,], points(X1, X2, pch = 19, col = Col, cex = 0.3))
dev.off()
d <- read.csv("FFeatureSelection_NormalizedDataTable.csv.csv", as.is=T)
d <- read.csv("FeatureSelection_NormalizedDataTable.csv.csv", as.is=T)
d <- read.csv("FeatureSelection_NormalizedDataTable.csv", as.is=T)
names(d)[1] <- "cell_id"
epcam <- read.csv("DTC1-3 EPCAM.csv", as.is = T, check.names = F)
names(epcam)[1] <- names(d)[1] <- "cell_id"
d <- merge(d, epcam)
um1 <- umap(d[,2:ncol(d)])
um1_layout <- data.frame(um1$layout)
um1_layout$cell_id <- d$cell_id
with(um1_layout, plot(X1, X2, pch = 19, col = alpha("darkgoldenrod",0.5) , cex = 0.1, main = "n_neighbors = 15, min_dist = 0.1"))
write.csv(um1_layout, "umap_nn_15_mindist_p1_epcam.csv")
d2 <- d[!(d$cell_id %in% um1_layout$cell_id[um1_layout$X2 < -10]),]
um2 <- umap(d2[,2:ncol(d2)])
um2_layout <- data.frame(um2$layout)
um2_layout$cell_id <- d2$cell_id
with(um2_layout, plot(X1, X2, pch = 19, col = alpha("darkgoldenrod",0.5) , cex = 0.1, main = "n_neighbors = 15, min_dist = 0.1"))
write.csv(um1_layout, "umap2_nn_15_mindist_p1_epcam.csv")
custom.config <- umap.defaults
custom.config$min_dist <- 0.3
um2 <- umap(d2[,2:ncol(d2)], custom.config)
um2_mindist_p3_layout <- data.frame(um2$layout)
um2_mindist_p3_layout$cell_id <- d2$cell_id
with(um2_mindist_p3_layout, plot(X1, X2, pch = 19, col = alpha("darkgoldenrod",0.5) , cex = 0.1, main = "n_neighbors = 15, min_dist = 0.3"))
write.csv(um2_mindist_p3_layout, "um2_mindist_p3_layout_epcam.csv")
custom.config <- umap.defaults
custom.config$min_dist <- 0.3
um_nn15_mindist_p3 <- umap(d[,2:ncol(d)], custom.config)
um_nn15_mindist_p3_layout <- data.frame(um_nn15_mindist_p3$layout)
um_nn15_mindist_p3_layout$cell_id <- d$cell_id
with(um_nn15_mindist_p3_layout, plot(X1, X2, pch = 19, col = alpha("darkgoldenrod",0.5) , cex = 0.1, main = "n_neighbors = 15, min_dist = 0.3"))
write.csv(um_nn15_mindist_p3_layout, "um_nn15_mindist_p3_epcam.csv")
View(ul)
View(ul)
View(d2)
View(d2)
coul <- colorRampPalette(c("lightgrey","red"))(100)
coul2 <- colorRampPalette(c("lightgrey","blue"))(100)
ul <- um2_mindist_p3_layout
ul <- merge(ul, epcam)
ul <- merge(ul, d2[,c("cell_id","PTPRC")])
ul$Col <- coul[as.numeric(cut(log10(ifelse(ul$EPCAM == 0,1, ul$EPCAM)),breaks = 100))]
ul$Col2 <- coul2[as.numeric(cut(log10(ifelse(ul$PTPRC == 0, 1, ul$PTPRC)),breaks = 100))]
ul1 <- ul[grep("DTC1", ul$cell_id),]
ul2 <- ul[grep("DTC2", ul$cell_id),]
ul3 <- ul[grep("DCT3", ul$cell_id),]
png("DTC_low_epcam.png")
with(ul1, plot(X1, X2, pch = 19, col = "lightgrey", cex = 0.1, main = "", xlab = "umap_1", ylab = "umap_2", asp = 1))
with(ul1[ul1$PTPRC > 0,], points(X1, X2, pch = 19, col = alpha(Col2,0.5), cex = 0.3))
with(ul1[ul1$EPCAM > 0,], points(X1, X2, pch = 19, col = alpha(Col,0.5), cex = 0.3))
dev.off()
png("DTC_intermediate_epcam.png")
with(ul3, plot(X1, X2, pch = 19, col = "lightgrey", cex = 0.1, main = "", xlab = "umap_1", ylab = "umap_2"))
with(ul3[ul3$PTPRC > 0,], points(X1, X2, pch = 19, col = Col2, cex = 0.3))
with(ul3[ul3$EPCAM > 0,], points(X1, X2, pch = 19, col = Col, cex = 0.3))
dev.off()
png("DTC_high_epcam.png")
with(ul2, plot(X1, X2, pch = 19, col = "lightgrey", cex = 0.1, main = "", xlab = "umap_1", ylab = "umap_2"))
with(ul2[ul2$PTPRC > 0,], points(X1, X2, pch = 19, col = Col2, cex = 0.3))
with(ul2[ul2$EPCAM > 0,], points(X1, X2, pch = 19, col = Col, cex = 0.3))
dev.off()
